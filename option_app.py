{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3696d6b-6483-43d2-84e8-c456c908d3f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# üìò Option Pricing Prototype App with Charts\n",
    "# Author: Amanjot Kaur | MSc Finance & Analytics\n",
    "# CIA-III Project: Option Pricing and Greeks Analysis\n",
    "\n",
    "import streamlit as st\n",
    "import yfinance as yf\n",
    "import numpy as np\n",
    "from scipy.stats import norm\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ---------- Helper Functions ----------\n",
    "def get_live_price(symbol):\n",
    "    \"\"\"Fetch latest live price from Yahoo Finance\"\"\"\n",
    "    data = yf.download(symbol, period=\"1d\", interval=\"1m\", progress=False)\n",
    "    if data.empty:\n",
    "        data = yf.Ticker(symbol).history(period=\"1d\")\n",
    "    return round(data['Close'].iloc[-1], 2)\n",
    "\n",
    "def black_scholes(S, K, T, r, sigma, option_type='call'):\n",
    "    \"\"\"Black-Scholes option pricing model\"\"\"\n",
    "    d1 = (np.log(S/K)+(r+0.5*sigma**2)*T)/(sigma*np.sqrt(T))\n",
    "    d2 = d1 - sigma*np.sqrt(T)\n",
    "    if option_type == 'call':\n",
    "        price = S*norm.cdf(d1)-K*np.exp(-r*T)*norm.cdf(d2)\n",
    "    else:\n",
    "        price = K*np.exp(-r*T)*norm.cdf(-d2)-S*norm.cdf(-d1)\n",
    "    return price, d1, d2\n",
    "\n",
    "def greeks(S,K,T,r,sigma,option_type='call'):\n",
    "    \"\"\"Compute Greeks\"\"\"\n",
    "    price,d1,d2 = black_scholes(S,K,T,r,sigma,option_type)\n",
    "    delta = norm.cdf(d1) if option_type=='call' else -norm.cdf(-d1)\n",
    "    gamma = norm.pdf(d1)/(S*sigma*np.sqrt(T))\n",
    "    theta = (-S*norm.pdf(d1)*sigma/(2*np.sqrt(T))\n",
    "             - r*K*np.exp(-r*T)*norm.cdf(d2 if option_type=='call' else -d2))\n",
    "    vega = S*norm.pdf(d1)*np.sqrt(T)\n",
    "    rho = K*T*np.exp(-r*T)*norm.cdf(d2 if option_type=='call' else -d2)\n",
    "    return price,delta,gamma,theta,vega,rho\n",
    "\n",
    "# ---------- Streamlit UI ----------\n",
    "st.set_page_config(page_title=\"Option Pricing Prototype\", page_icon=\"üìà\")\n",
    "st.title(\"üìä Option Pricing Prototype App\")\n",
    "st.caption(\"Developed by **Amanjot Kaur | MSc Finance & Analytics, Christ University (Delhi NCR)**\")\n",
    "\n",
    "st.write(\"\"\"\n",
    "Use this interactive app to price **Equity or Index Options** using live market data.  \n",
    "It calculates the **Option Price** and key **Greeks (Delta, Gamma, Theta, Vega, Rho)** using the Black-Scholes model.\n",
    "\"\"\")\n",
    "\n",
    "st.divider()\n",
    "\n",
    "# ---------- USER INPUTS ----------\n",
    "symbol = st.text_input(\"Enter Stock Symbol (e.g. RELIANCE.NS, INFY.NS, TCS.NS):\", \"RELIANCE.NS\")\n",
    "\n",
    "if st.button(\"Fetch Live Price\"):\n",
    "    try:\n",
    "        S = get_live_price(symbol)\n",
    "        st.success(f\"‚úÖ Live Spot Price for {symbol}: ‚Çπ{S}\")\n",
    "        st.session_state['S'] = S\n",
    "    except Exception as e:\n",
    "        st.error(\"‚ö†Ô∏è Could not fetch live price. Please check symbol or connection.\")\n",
    "\n",
    "if 'S' in st.session_state:\n",
    "    S = st.session_state['S']\n",
    "    K = st.number_input(\"Enter Strike Price (‚Çπ):\", value=S, step=10.0)\n",
    "    days = st.number_input(\"Enter Days to Expiry:\", value=30, step=5)\n",
    "    r = st.number_input(\"Enter Risk-free Rate (%):\", value=6.0, step=0.1)/100\n",
    "    sigma = st.number_input(\"Enter Volatility (%):\", value=25.0, step=1.0)/100\n",
    "    option_type = st.selectbox(\"Option Type\", [\"call\", \"put\"])\n",
    "    \n",
    "    T = days / 365\n",
    "\n",
    "    if st.button(\"Calculate Option Price & Greeks\"):\n",
    "        price, delta, gamma, theta, vega, rho = greeks(S, K, T, r, sigma, option_type)\n",
    "        st.subheader(\"üí∞ Option Pricing Results\")\n",
    "        st.metric(\"Option Price (‚Çπ)\", f\"{price:.2f}\")\n",
    "        \n",
    "        col1, col2, col3 = st.columns(3)\n",
    "        col1.metric(\"Delta\", f\"{delta:.4f}\")\n",
    "        col2.metric(\"Gamma\", f\"{gamma:.4f}\")\n",
    "        col3.metric(\"Theta\", f\"{theta:.4f}\")\n",
    "\n",
    "        col4, col5 = st.columns(2)\n",
    "        col4.metric(\"Vega\", f\"{vega:.4f}\")\n",
    "        col5.metric(\"Rho\", f\"{rho:.4f}\")\n",
    "\n",
    "        st.divider()\n",
    "        st.subheader(\"üìà Scenario Analysis Charts\")\n",
    "\n",
    "        # --- Chart 1: Price vs Volatility ---\n",
    "        st.write(\"### Option Price vs Volatility\")\n",
    "        vol_range = np.linspace(0.05, 0.6, 15)\n",
    "        prices_vol = [black_scholes(S, K, T, r, vol, option_type)[0] for vol in vol_range]\n",
    "        fig1, ax1 = plt.subplots()\n",
    "        ax1.plot(vol_range*100, prices_vol, marker='o', color='purple')\n",
    "        ax1.set_xlabel(\"Volatility (%)\")\n",
    "        ax1.set_ylabel(\"Option Price (‚Çπ)\")\n",
    "        ax1.set_title(\"Option Price vs Volatility\")\n",
    "        st.pyplot(fig1)\n",
    "\n",
    "        # --- Chart 2: Price vs Spot Price ---\n",
    "        st.write(\"### Option Price vs Spot Price\")\n",
    "        spot_range = np.linspace(S*0.7, S*1.3, 15)\n",
    "        prices_spot = [black_scholes(spot, K, T, r, sigma, option_type)[0] for spot in spot_range]\n",
    "        fig2, ax2 = plt.subplots()\n",
    "        ax2.plot(spot_range, prices_spot, marker='o', color='teal')\n",
    "        ax2.set_xlabel(\"Spot Price (‚Çπ)\")\n",
    "        ax2.set_ylabel(\"Option Price (‚Çπ)\")\n",
    "        ax2.set_title(\"Option Price vs Spot Price\")\n",
    "        st.pyplot(fig2)\n",
    "\n",
    "        st.info(\"\"\"\n",
    "        ‚úÖ **Observations:**\n",
    "        - As volatility increases, the option price also increases (Vega effect).  \n",
    "        - As the spot price increases, the call option price rises while put option falls (Delta effect).  \n",
    "        \"\"\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
